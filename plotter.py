
import matplotlib.pyplot as plt
import numpy as np
import scipy.optimize as scp

def function(x, a, b, c):
    return (c + a*np.exp(-x/b))

potentials = [0.45941807044410415, 0.5359877488514548, 0.6125574272588055, 0.6891271056661562, 0.7656967840735069, 0.8422664624808576, 0.9188361408882083, 0.9954058192955589, 1.0719754977029097, 1.1485451761102603, 1.225114854517611, 1.3016845329249618, 1.3782542113323124, 1.454823889739663, 1.5313935681470139, 1.6079632465543645, 1.6845329249617151, 1.7611026033690658, 1.8376722817764166, 1.9142419601837672, 1.9908116385911179, 2.0673813169984685, 2.1439509954058193, 2.22052067381317, 2.2970903522205206]

times = [16.127997232835874, 13.738392061937963, 12.008679328243673, 10.677079747113185, 9.548627119971401, 8.634483183687195, 7.893052250139217, 7.272260720260951, 6.680469075797496, 6.247085882267083, 5.769876755163033, 5.434737520250347, 5.082681974229268, 4.81787508970716, 4.568794917604519, 4.332397246064191, 4.0992392034702565, 3.909320431409345, 3.6950080843144026, 3.5497825461149124, 3.3783811125952616, 3.2319142418312437, 3.034968171950214, 2.9490162361019814, 2.8579037035835286]

errors = [0.08576558389696473, 0.08004616292255744, 0.08125450324493567, 0.06390748672395395, 0.0774735043910119, 0.042812996086237384, 0.027301590429713384, 0.05449739328724054, 0.06489896596341424, 0.08175710109358703, 0.07366894476136934, 0.05901724691466647, 0.0491327728407456, 0.053666560313350424, 0.03388043347265418, 0.040692155690038354, 0.030622031189527762, 0.017821186062574965, 0.04263945338956558, 0.05019085717644967, 0.03642624275840557, 0.027013802031664064, 0.03736645145415572, 0.027698355111067156, 0.03797050842717585] 

Nspeeds = [0.28521830290462896, 0.33482812102474785, 0.3830562774027185, 0.43082941299972255, 0.4817446468695886, 0.5327475776072629, 0.5827910235763187, 0.6325405780879289, 0.6885744021576605, 0.7363433265832818, 0.7972440652018783, 0.8464070220245161, 0.9050340004201303, 0.9547777628829304, 1.0068300466443003, 1.0617678247715894, 1.1221594475642744, 1.1766750975544, 1.2449228513267288, 1.2958540249273878, 1.361598898019618, 1.4233050928336457, 1.5156666361493092, 1.5598422089667074, 1.6095713771713351]

dv = [0.0015167360170991041, 0.0019508619499114838, 0.0025918793136567465, 0.0025787224263275677, 0.003908671429480779, 0.0026415616858393412, 0.002015838908391041, 0.004740178326961769, 0.006689315702516536, 0.009636700523350313, 0.010179095930971438, 0.00919135690049432, 0.008748694130629021, 0.010635318982650714, 0.007466266056758533, 0.009972682369219362, 0.008382726622502596, 0.005364038639614847, 0.014366093031864228, 0.018322255924617562, 0.014680975989928841, 0.01189662816878511, 0.018660849330740765, 0.014650669905534285, 0.02138499049649276]

lambda13 = [0.013976266919973026, 0.016320816811902658, 0.013506592424397541, 0.014305650211376652, 0.013636333399050874, 0.012282577557312511, 0.012420410001058136, 0.012603911856648933, 0.013391539291271928, 0.013378704834572194, 0.0143315534152432, 0.014489637976196776, 0.014689761466511932, 0.015136527045849833, 0.015144949643848072, 0.015589384793452591, 0.01625556187774627, 0.01655150452129804, 0.017017934116654195, 0.016903583726155975, 0.018178417356756713, 0.01873038818757447, 0.020527391924839718, 0.020835589791139645, 0.02119024816925842]

lambda23 = [0.016125767364068247, 0.014492484320034709, 0.014139634942095816, 0.013713650827694336, 0.013843204805690824, 0.014020078655500229, 0.015051160861986669, 0.014547002542054056, 0.013580943475833456, 0.016305129863395832, 0.017438674646507904, 0.018079018801678334, 0.019757747453010052, 0.018864360736154426, 0.01987508260813783, 0.020872120119695966, 0.022102487028619205, 0.02317408839065722, 0.025370009879614443, 0.026383546087771267, 0.028206443650503888, 0.03013136032481899, 0.0334051519576262, 0.034904651126871133, 0.036312751504280094]
#calculate fitted line


print(np.average(lambda13))
print(np.std(lambda13))
print(np.average(lambda23))
print(np.std(lambda23))

ebe = np.polyfit(potentials, Nspeeds, 1, cov=True, w = 1/np.array(np.sqrt(dv)))

print(ebe)

x = np.arange(potentials[0]*.95, potentials[-1]*1.01, 0.001)
y = x*ebe[0][0] + ebe[0][1]
err = np.sqrt(np.diag(ebe[1]))
#y_min = x*(ebe[0][0]-err[0]) + ebe[0][1]-err[1]
#y_max = x*(ebe[0][0]+err[0]) + ebe[0][1]+err[1]
print(ebe[0])
print(err)

ayy = scp.curve_fit(function,potentials , times)
ruu = function(x,ayy[0][0],ayy[0][1],ayy[0][2])
print(ayy[0])
print(np.sqrt(np.diag(ayy[1])))

print(np.average(lambda13))

plt.errorbar((np.array(potentials)), np.array(times),yerr = np.array(errors), fmt='.k')
plt.plot(x,ruu)
plt.ylabel("t12 [us]")
plt.xlabel("E/p [V/cm*hPa]")
plt.title("czas przelotu")
plt.show()
plt.errorbar((np.array(potentials)), Nspeeds,yerr = dv, fmt='.k')
plt.plot(x,y)
#plt.plot(x,y_max)
#plt.plot(x,y_min)
plt.ylabel("v12 [cm/us]")
plt.xlabel("E/p [V/cm*hPa]")
plt.title("zależność prędkości od pola elektrycznego")
plt.show()
plt.plot(potentials,lambda13)
plt.plot(potentials,lambda23)
plt.ylabel("lambda")
plt.xlabel("E/p [V/cm*hPa]")
plt.title("wyliczone wartośći lambda w zależności od E/p")
plt.show()